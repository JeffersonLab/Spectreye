-- testing --
qtest, encoder drift demo python3 timeline.py images/angle_snaps/SHMS_angle_03083.jpg

completely restructured testing system with python rewrite

ability to test on all SHMS, all HMS, all images, or just clean examples

email w/ Sawatzky: accuracy on clean images more important than trying to read dirty ones

-- encoder --
realized that encoder stamps don't match up to images, created timeline system

wrote concrete system for extracting date and info from images

noticed several cases of drift

noticed that if the OCR is successful the tick recognition is generally accurate, most errors occur
due to OCR failure

extract_timestamp w/ regex

-- algorithm --
numerous bug fixes for tick location and detection, especially midpoint finding

added tesseract ocr alterive 

significantly improved filtering for numbox

function now returns json object with various values including if/where failure occurs

guesses by combining nearest encoder mark and tick width in case reading is wrong

added numerous wrappers and helpers for loading from images

# immediate TODO
full filename and path in json object

-- future --
C++ rewrite - returned object structure - raw number or more data?
Alternative OCR model for increased accuracy- pretrained, or custom
If custom, MNIST or other dataset?
